 # MIT License
 #
 # Copyright (c) 2018 Lotus Engineering, LLC
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in all
 # copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 # SOFTWARE.

#
# Autogenerated Python Script from test_defer_disp.tcl#
#

import sys
import pytest
import struct
from qspypy.qspy import FILTER, QS_OBJ_KIND


def on_reset(qutest):
    qutest.expect_pause()
    qutest.glb_filter(FILTER.SM,FILTER.AO,FILTER.QF,FILTER.EQ)
    qutest.Continue()
    qutest.expect("===RTC===> St-Init  Obj=l_tserver,State=QHsm::top->TServer::idle")
    qutest.expect("%timestamp AO-RCllA Obj=l_tserver,Que=l_tserver.m_requestQueue")
    qutest.expect("===RTC===> St-Entry Obj=l_tserver,State=TServer::idle")
    qutest.expect("%timestamp Init===> Obj=l_tserver,State=TServer::idle")
    qutest.current_obj(QS_OBJ_KIND.SM_AO,"l_tserver")


def test_NEW_REQUEST_SIG_l_tserver(qutest):
    qutest.dispatch("NEW_REQUEST_SIG")
    qutest.expect("%timestamp QF-New   Sig=NEW_REQUEST_SIG,*")
    qutest.expect("%timestamp Disp===> Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::idle")
    qutest.expect("%timestamp QF-NewRf Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("===RTC===> St-Entry Obj=l_tserver,State=TServer::receiving")
    qutest.expect("%timestamp ===>Tran Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::idle->TServer::receiving")
    qutest.expect("%timestamp QF-gcA   Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("%timestamp Trg-Done QS_RX_EVENT")

def test_NEW_REQUEST_SIG_l_tserver_defer(qutest_noreset):
    qutest = qutest_noreset # name change
    qutest.dispatch("NEW_REQUEST_SIG")
    qutest.expect("%timestamp QF-New   Sig=NEW_REQUEST_SIG,*")
    qutest.expect("%timestamp Disp===> Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::receiving")
    qutest.expect("%timestamp EQ-Post  Obj=l_tserver.m_requestQueue,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>,*")
    qutest.expect("%timestamp AO-Defer Obj=l_tserver,Que=l_tserver.m_requestQueue,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("%timestamp =>Intern Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::busy")
    qutest.expect("%timestamp QF-gcA   Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("%timestamp Trg-Done QS_RX_EVENT")

def test_RECEIVED_SIG_AUTHORIZED_SIG_l_tserver_recall(qutest_noreset):
    qutest = qutest_noreset # name change
    qutest.dispatch("RECEIVED_SIG")
    qutest.expect("%timestamp QF-New   Sig=RECEIVED_SIG,*")
    qutest.expect("%timestamp Disp===> Obj=l_tserver,Sig=RECEIVED_SIG,State=TServer::receiving")
    qutest.expect("===RTC===> St-Exit  Obj=l_tserver,State=TServer::receiving")
    qutest.expect("===RTC===> St-Entry Obj=l_tserver,State=TServer::authorizing")
    qutest.expect("%timestamp ===>Tran Obj=l_tserver,Sig=RECEIVED_SIG,State=TServer::receiving->TServer::authorizing")
    qutest.expect("%timestamp QF-gc    Evt<Sig=RECEIVED_SIG,Pool=1,Ref=1>")
    qutest.expect("%timestamp Trg-Done QS_RX_EVENT")
    qutest.dispatch("AUTHORIZED_SIG")
    qutest.expect("%timestamp QF-New   Sig=AUTHORIZED_SIG,*")
    qutest.expect("%timestamp Disp===> Obj=l_tserver,Sig=AUTHORIZED_SIG,State=TServer::authorizing")
    qutest.expect("===RTC===> St-Exit  Obj=l_tserver,State=TServer::authorizing")
    qutest.expect("%timestamp QF-DelRf Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=1>")
    qutest.expect("%timestamp QF-gc    Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=1>")
    qutest.expect("===RTC===> St-Exit  Obj=l_tserver,State=TServer::busy")
    qutest.expect("%timestamp EQ-GetL  Obj=l_tserver.m_requestQueue,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=1>")
    qutest.expect("%timestamp AO-LIFO  Obj=l_tserver,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>,*")
    qutest.expect("%timestamp AO-RCall Obj=l_tserver,Que=l_tserver.m_requestQueue,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=1>")
    qutest.expect("===RTC===> St-Entry Obj=l_tserver,State=TServer::idle")
    qutest.expect("%timestamp ===>Tran Obj=l_tserver,Sig=AUTHORIZED_SIG,State=TServer::authorizing->TServer::idle")
    qutest.expect("%timestamp QF-gc    Evt<Sig=AUTHORIZED_SIG,Pool=1,Ref=1>")
    qutest.expect("%timestamp AO-GetL  Obj=l_tserver,Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=1>")
    qutest.expect("%timestamp Disp===> Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::idle")
    qutest.expect("%timestamp QF-NewRf Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("===RTC===> St-Entry Obj=l_tserver,State=TServer::receiving")
    qutest.expect("%timestamp ===>Tran Obj=l_tserver,Sig=NEW_REQUEST_SIG,State=TServer::idle->TServer::receiving")
    qutest.expect("%timestamp QF-gcA   Evt<Sig=NEW_REQUEST_SIG,Pool=1,Ref=2>")
    qutest.expect("%timestamp Trg-Done QS_RX_EVENT")



if __name__ == "__main__":
    options = ['-x', '-v', '--tb=short']
    options.extend(sys.argv)
    pytest.main(options)
